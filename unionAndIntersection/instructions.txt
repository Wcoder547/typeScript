==========================================
üìò TypeScript: Union and Intersection Types
==========================================

üìå 1. What are Union and Intersection Types?

‚û° Union Type:
- A Union type describes a value that can be one of several types.
- It allows flexibility by accepting multiple possible types.
- Syntax: `type A = string | number`

‚û° Intersection Type:
- An Intersection type combines multiple types into one.
- The resulting type has all the properties of the intersected types.
- Syntax: `type A = Type1 & Type2`

----------------------------------------------------
üìå 2. Why Are They Important? (Study & Interview POV)

‚úÖ Union Types:
- Handle multiple input types in a function.
- Create flexible API definitions.
- Reduce code duplication.

‚úÖ Intersection Types:
- Combine multiple interfaces/types for composition.
- Enforce strict structure by merging types.
- Useful in scenarios like Redux states, component props, etc.

----------------------------------------------------
üìå 3. Union Type: Syntax & Examples

// Example 1: Basic usage
type Status = "success" | "error" | "loading";

function handleStatus(status: Status) {
    if (status === "success") {
        console.log("Everything is OK!");
    } else if (status === "error") {
        console.log("Something went wrong.");
    } else {
        console.log("Loading...");
    }
}

// Example 2: Accept string or number
function printId(id: string | number) {
    console.log("ID:", id);
}

printId("user123");
printId(101);

----------------------------------------------------
üìå 4. Intersection Type: Syntax & Examples

// Example 1: Combine multiple interfaces
interface Person {
    name: string;
    age: number;
}

interface Employee {
    employeeId: number;
    department: string;
}

type EmployeeInfo = Person & Employee;

const emp: EmployeeInfo = {
    name: "Waseem",
    age: 21,
    employeeId: 1001,
    department: "IT"
};

console.log(emp);

// Example 2: Using with function parameters
type WithTimestamps = {
    createdAt: Date;
    updatedAt: Date;
};

type BlogPost = {
    title: string;
    content: string;
};

type CompletePost = BlogPost & WithTimestamps;

function savePost(post: CompletePost) {
    console.log("Saving post:", post.title, "at", post.createdAt);
}

----------------------------------------------------
üìå 5. Key Differences (Union vs Intersection)

| Feature        | Union (`|`)                            | Intersection (`&`)                        |
|----------------|----------------------------------------|--------------------------------------------|
| Meaning        | A or B (either one)                   | A and B (must have all members)            |
| Flexibility    | More flexible, allows alternatives    | More strict, merges all requirements       |
| Use case       | APIs, inputs that accept multiple types| Object merging, enforcing combined props   |
| Risk           | Must narrow down type before access   | All properties must exist and match types  |

----------------------------------------------------
üìå 6. Interview Questions You Might Be Asked:

‚ùì What is a union type in TypeScript?
‚ùì How does intersection type differ from union type?
‚ùì When should you use `|` vs `&`?
‚ùì Can a variable be both a string and number? Why or why not?
‚ùì Give a real-world use case of intersection types in React or Redux.

----------------------------------------------------
üìå 7. Advanced Notes (Bonus)

‚úÖ Type Narrowing:
- TypeScript uses **type guards** to narrow union types.
```ts
function process(value: string | number) {
    if (typeof value === "string") {
        console.log(value.toUpperCase());
    } else {
        console.log(value.toFixed(2));
    }
}
````

‚úÖ Discriminated Unions:

```ts
type Shape =
    | { kind: "circle"; radius: number }
    | { kind: "square"; side: number };

function area(shape: Shape) {
    switch (shape.kind) {
        case "circle":
            return Math.PI * shape.radius ** 2;
        case "square":
            return shape.side ** 2;
    }
}
```

‚úÖ Combining Union and Intersection:

```ts
type Admin = { role: "admin"; access: string[] };
type User = { name: string };

type AdminUser = Admin & User;

const user1: AdminUser = {
    role: "admin",
    access: ["dashboard", "settings"],
    name: "Malik"
};
```

---

üìå 8. Final Tips:

‚úî Use unions when something can be multiple options.
‚úî Use intersections when something must satisfy multiple rules.
‚úî Use type narrowing or `in`, `typeof`, or `instanceof` to safely handle unions.
‚úî Think of union as "OR", and intersection as "AND".

```

---

Let me know if you also want a `.pdf` or `.docx` version for cleaner formatting.
```
